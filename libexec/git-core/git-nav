#!/usr/bin/ruby -w
# vim:syntax=ruby

#require 'optparse'

class DynamicsNAV

    def initialize       
       @filename = "all.txt"
    end

    # Combining MS Dynamics NAV files into one
    def combine path
        if !path.nil? then 
            @filename = path 
        end

        if File.exist?(@filename) then
            File.delete(@filename) 
        end

        i = 0
        if Dir.glob('*.txt',File::FNM_CASEFOLD).count != 0 then
            File.open(@filename,"w") { 
                |f| 
                ( # Merging arrays
                Dir.glob('tab*.txt',File::FNM_CASEFOLD)| # Get all tables
                Dir.glob('for*.txt',File::FNM_CASEFOLD)| # Get all forms
                Dir.glob('pag*.txt',File::FNM_CASEFOLD)| # Get all pages
                Dir.glob('rep*.txt',File::FNM_CASEFOLD)| # Get all reports
                Dir.glob('dat*.txt',File::FNM_CASEFOLD)| # Get all dataports
                Dir.glob('que*.txt',File::FNM_CASEFOLD)| # Get all queries
                Dir.glob('xml*.txt',File::FNM_CASEFOLD)| # Get all xmlports
                Dir.glob('cod*.txt',File::FNM_CASEFOLD)| # Get all codeunits
                Dir.glob('men*.txt',File::FNM_CASEFOLD)).each{ 
                    |o| 
                    i = i + 1
                    f.puts( File.read(o) ) 
                } 
            }
        end

        puts i.to_s + " NAV objects => " + @filename
    end

    # Split one MS Dynamics NAV file into many smaller
    def separate path
        if !path.nil? then 
            @filename = path 
        end

        if File.exist?(@filename) then
            f = File
            b = String.new 
            File.open(@filename).each_line do |l|
                if l[0..6] == 'OBJECT ' then
                    if !b.empty? then
                        f.puts(b.rstrip)
                        f.puts
                        b = String.new
                    end
                    f = File.open(l.split[1][0..2].upcase + l.split[2] + '.TXT',"w")
                end
                
                b << l
            end

            if !b.empty? then
                f.puts(b.rstrip)
            end
        end
    end

end

#commands = {}
#options = {}
#OptionParser.new do |opts|
#  opts.banner = "Usage: git-nav [command] [options]"
#
#  opts.on("-i", "--separate", "Separate single file into multiple NAV objects") do |command|
#    commands[:separate] = command
#  end
#end.parse!

#p commands
#p options
#p ARGV

ARGV.each do |arg|
    if arg == 'separate' then
        nav = DynamicsNAV.new
        nav.separate ARGV[ARGV.index(arg) + 1]
    end 

    if arg == 'combine' then
        nav = DynamicsNAV.new
        nav.combine ARGV[ARGV.index(arg) + 1]
    end 
end
