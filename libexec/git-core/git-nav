#!/usr/bin/ruby -w
# vim:syntax=ruby

require 'optparse'

class DynamicsNAV
    # Class constructor
    def initialize
        @file_name = "all.txt"
        @file_buffer = String
        @file_object = File
    end

    # Combining MS Dynamics NAV files into one
    def join path
        if !path.nil? then 
            @file_name = path 
        end

        if File.exist?(@file_name) then
            File.delete(@file_name) 
        end

        if Dir.glob('*.txt',File::FNM_CASEFOLD).count != 0 then
            File.open(@file_name,"w") { 
                |f| 
                ( # Merging arrays
                Dir.glob('tab*.txt',File::FNM_CASEFOLD)| # Get all tables
                Dir.glob('for*.txt',File::FNM_CASEFOLD)| # Get all forms
                Dir.glob('pag*.txt',File::FNM_CASEFOLD)| # Get all pages
                Dir.glob('rep*.txt',File::FNM_CASEFOLD)| # Get all reports
                Dir.glob('dat*.txt',File::FNM_CASEFOLD)| # Get all dataports
                Dir.glob('que*.txt',File::FNM_CASEFOLD)| # Get all queries
                Dir.glob('xml*.txt',File::FNM_CASEFOLD)| # Get all xmlports
                Dir.glob('cod*.txt',File::FNM_CASEFOLD)| # Get all codeunits
                Dir.glob('men*.txt',File::FNM_CASEFOLD)).each{ 
                    |o| 
                    f.puts( File.read(o) ) 
                } 
            }
        end
    end

    # Split one MS Dynamics NAV file into many smaller
    def split path
        if !path.nil? then 
            @file_name = path 
        end

        if File.exist?(@file_name) then
            @file_buffer = String.new 
            File.open(@file_name,"r").each_line do |l|
                if l[0..6] == 'OBJECT ' then
                    flush
                    @file_object = File.open(l.split[1][0..2].upcase + l.split[2] + '.TXT',"w")
                end
                @file_buffer << l
            end
            flush
        end
    end

    # Find differenece between two versions of MS Dynamics NAV objects
    def diff versions, path
        if path.nil? then
            path = `#{'git diff --name-only ' + versions}`.split('\n') 
        else
            path = path.split
        end

        path.each {
            |p|
            @file_buffer = `#{'git show ' + versions.split('..').first + ':' + p}`
            #parse
            #p @file_buffer
            file_diff = `#{'git diff ' + versions + ' ' + p}`
            file_diff.each_line {
                |l|
                case l
                when /@@ -(\d+),(\d+) \+((\d+),(\d+)|(\d+)) @@ (.*)/ 
                    p $1.to_i
                end
                #slices = String.new
                #if l[0..1] == '@@' then
                #    slices = l.split('@@ ')[1].rstrip.split[0].split(',')
                #end
            }
        }
    end

    # Private methods section
    private
    
    # Flushes buffer into the object file
    def flush
        if !@file_buffer.empty? then
            @file_object.puts(@file_buffer.rstrip)
            # Every file will end with empty line
            @file_object.puts
            @file_buffer = String.new
        end
    end

    def parse
        category1 = 'Object definition was changed.'
        category2 = String
        temp_buffer = String.new
        @file_buffer.each_line {
            |l|
            
            if l.lstrip[0..16] == 'OBJECT-PROPERTIES' then
                category1 = 'Object properties were changed.'
            end

            if l.lstrip[0..9] == 'PROPERTIES' then
                category1 = 'Properties section was changed.'
            end

            temp_buffer += category1
        }
        @file_buffer = temp_buffer
    end
end

options = {}
OptionParser.new do |o|
    o.banner = "Usage: git-nav [options] filename
    Available options are:"
    
    o.on("-j", "--join", "Join all NAV objects into one big text file.") do |v|
        options[:join] = v
    end

    o.on("-s", "--split", "Split one big text file on many NAV objects.") do |v|
        options[:split] = v
    end

    o.on("-d", "--diff", "Explain difference between version in NAV objects.") do |v|
        options[:diff] = v
    end

#    o.on("-c", "--clean", "Clean up date and time of NAV objects.") do |v|
#        options[:clean] = v
#    end
end.parse!

if options[:join] then
    nav = DynamicsNAV.new
    nav.join ARGV[0]
end 

if options[:split] then
    nav = DynamicsNAV.new
    nav.split ARGV[0]
end 

if options[:diff] then
    nav = DynamicsNAV.new
    nav.diff ARGV[0], ARGV[1]
end
