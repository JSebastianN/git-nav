#!/usr/bin/ruby -w
# vim:syntax=ruby

require 'optparse'

class DynamicsNAV
    
    # Class constructor
    def initialize
        @file_name = "all.txt"
        @file_buffer = String
        @file_object = File
    end

    # Combining MS Dynamics NAV files into one
    def join path
        if !path.nil? then 
            @file_name = path 
        end

        if File.exist?(@file_name) then
            File.delete(@file_name) 
        end

        i = 0
        if Dir.glob('*.txt',File::FNM_CASEFOLD).count != 0 then
            File.open(@file_name,"w") { 
                |f| 
                ( # Merging arrays
                Dir.glob('tab*.txt',File::FNM_CASEFOLD)| # Get all tables
                Dir.glob('for*.txt',File::FNM_CASEFOLD)| # Get all forms
                Dir.glob('pag*.txt',File::FNM_CASEFOLD)| # Get all pages
                Dir.glob('rep*.txt',File::FNM_CASEFOLD)| # Get all reports
                Dir.glob('dat*.txt',File::FNM_CASEFOLD)| # Get all dataports
                Dir.glob('que*.txt',File::FNM_CASEFOLD)| # Get all queries
                Dir.glob('xml*.txt',File::FNM_CASEFOLD)| # Get all xmlports
                Dir.glob('cod*.txt',File::FNM_CASEFOLD)| # Get all codeunits
                Dir.glob('men*.txt',File::FNM_CASEFOLD)).each{ 
                    |o| 
                    i = i + 1
                    f.puts( File.read(o) ) 
                } 
            }
        end

        puts i.to_s + " NAV objects => " + @file_name
    end

    # Split one MS Dynamics NAV file into many smaller
    def split path
        if !path.nil? then 
            @file_name = path 
        end

        if File.exist?(@file_name) then
            @file_buffer = String.new 
            File.open(@file_name).each_line do |l|
                if l[0..6] == 'OBJECT ' then
                    flush
                    @file_object = File.open(l.split[1][0..2].upcase + l.split[2] + '.TXT',"w")
                end
                
                @file_buffer << l
            end
            
            flush
        end
    end

    # Private methods section
    private
    
    # Flushes buffer into the object file
    def flush
        if !@file_buffer.empty? then
            @file_object.puts(@file_buffer.rstrip)
            # Every file will end with empty line
            @file_object.puts
            @file_buffer = String.new
        end
    end
end

options = {}
OptionParser.new do |o|
    o.banner = "Usage: git-nav [options] filename
    Available options are:"
    
    o.on("-j", "--join", "Join all NAV objects into one big text file.") do |v|
        options[:join] = v
    end

    o.on("-s", "--split", "Split one big text file on many NAV objects.") do |v|
        options[:split] = v
    end

#    o.on("-c", "--clean", "Clean up date and time of NAV objects.") do |v|
#        options[:clean] = v
#    end
end.parse!

if options[:join] then
    nav = DynamicsNAV.new
    nav.join ARGV[0]
end 

if options[:split] then
    nav = DynamicsNAV.new
    nav.split ARGV[0]
end 
